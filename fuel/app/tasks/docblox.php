<?php
/**
 * Fuel is a fast, lightweight, community driven PHP5 framework.
 *
 * @package    Fuel
 * @version    1.1
 * @author     Fuel Development Team
 * @license    MIT License
 * @copyright  2010 - 2012 Fuel Development Team
 * @link       http://fuelphp.com
 *
 */

namespace Fuel\Tasks;

/**
 * Docblox XML import Task
 *
 * Run this after docblox has ran, to import the generated xml file
 *
 * Usage:
 * php oil r docblox --version=1.1/develop
 */

class Docblox
{
	// default function if no command is selected. Provided user with menu
	public static function run()
	{
		// check if a version was passed
		if ( ! $version = \Cli::option('version', \Cli::option('v', '')))
		{
			\Cli::write('Docblox: a FuelPHP repository version is required.');
			return;
		}
		else
		{
			$version = explode('/', $version);
			if ( ! isset($version[1]))
			{
				\Cli::write('Docblox: FuelPHP repository version must be in the form "major.minor/branch".');
				return;
			}
		}

		// split it in major, minor and branch
		list($version, $branch) = $version;

		$version = explode('.', $version);
		if ( ! isset($version[1]))
		{
			\Cli::write('Docblox: FuelPHP repository version must be in the form "major.minor/branch".');
			return;
		}
		list($major, $minor) = $version;

		// check if we know this version
		$result = \DB::select()->from('versions')->where('major', $major)->where('minor', $minor)->where('branch', $branch)->execute();
		if ($result->count())
		{
			static::process($result->current());
		}
		else
		{
			\Cli::write('Docblox: FuelPHP repository version "'.$major.'.'.$minor.'/'.$branch.'" does not exist.');
		}
	}

	protected static function process($version)
	{
		// deal with possible timeouts
		set_time_limit(0);

		// get the docblox XML
		try
		{
			$xml = \File::read($version['docbloxpath'].DS.'structure.xml', true);
		}
		catch (\Exception $e)
		{
			\Cli::write('Docblox: Can not read the docblox XML file.');
			return;
		}

		// delete the current docblock data for this version
		$result = \DB::delete('docblox')->where('version_id', $version['id'])->execute();

		// convert to array
		$xml = \Format::forge($xml, 'xml')->to_array();

		// get the docblox version info
		$docblox = array_shift($xml);

		// and verify it
		if ($docblox !== array('version' => '0.18.1', 'title' => ''))
		{
			\Cli::write('Docblox: XML has been generated by an unsupported version of Docblox.');
		}

		// and start loopin'
		foreach ($xml as $tag => $files)
		{
			// we only need the file tags
			if ($tag == 'file')
			{
				foreach ($files as $file)
				{
					// array to store the record in
					$info = array('version_id' => $version['id']);

					// step 1: file attributes
					if (isset($file['@attributes']))
					{
						$info['file'] = $file['@attributes']['path'];
						$info['hash'] = $file['@attributes']['hash'];
						isset($file['@attributes']['package']) and $info['package'] = $file['@attributes']['package'];
						unset($file['@attributes']);
					}
					else
					{
						// attributes missing, skip this file
						\Cli::write('Docblox: missing @attributes.');
						continue;
					}

					// step 2: docblock
					if (isset($file['docblock']))
					{
						$info['docblock'] = serialize($file['docblock']);
						unset($file['docblock']);
					}
					else
					{
						$info['docblock'] = serialize(array());
					}

					// step 3: parse markers
					if (isset($file['parse_markers']))
					{
						$info['markers'] = serialize($file['parse_markers']);
						unset($file['parse_markers']);
					}
					else
					{
						// markers are optional
						$info['markers'] = serialize(array());
					}

					// step 3: functions
					if (isset($file['function']))
					{
						$info['functions'] = serialize($file['function']);
						unset($file['function']);
					}
					else
					{
						// functions are optional
						$info['functions'] = serialize(array());
					}

					// step 4: classes
					if (isset($file['class']))
					{
						$info['classes'] = serialize($file['class']);
						unset($file['class']);
					}
					else
					{
						// classes are optional
						$info['classes'] = serialize(array());
					}

					// insert the info into the database
					list($insert_id, $rows_affected) = \DB::insert('docblox')->set($info)->execute();
				}
			}
		}
	}

}
